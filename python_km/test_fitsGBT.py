"""Unit tests for the fitsGBT module and it's main class fitsGBT.Processor."""

import unittest
import scipy as sp

import fitsGBT
import kiyopy.custom_exceptions as ce

# This fits file generated by the script make_test_GBT_fits_file.py
fits_test_file_name = 'testfile_GBTfits.fits'
# This file has known properties:
IF_set = (695., 725.)
scan_set = (113, 114)
pol_set = (-5, -7, -8, -6)
cal_set = ('T', 'F')
nIFs = len(IF_set)
nscans = len(scan_set)
ntimes_scan = 10
npol = len(pol_set)
ncal = len(cal_set)


class TestInit(unittest.TestCase) :
    
    def setUp(self) :
        self.FileProcessor = fitsGBT.Processor(fits_test_file_name)

    def test_gets_IFs(self) :
        for ii in range(len(IF_set)) :
            self.assertAlmostEqual(self.FileProcessor.IF_set[ii], IF_set[ii])

    def test_gets_scans(self) :
        for ii in range(len(scan_set)) :
            self.assertEqual(self.FileProcessor.scan_set[ii], scan_set[ii])

    def tearDown(self) :
        del self.FileProcessor

class TestGetIFScanInds(unittest.TestCase) :
    
    def setUp(self) : 
        self.FileProcessor = fitsGBT.Processor(fits_test_file_name)
        self.IFs_all = sp.array(self.FileProcessor.fitsdata.field('CRVAL1')/1E6)
        self.IFs_all  = self.IFs_all.round(0)
        self.IFs_all  = sp.array(self.IFs_all, int)
        self.scans_all = sp.array(self.FileProcessor.fitsdata.field('SCAN'))

    def test_gets_records(self) :
        for scan_ind in range(2) :
            for IF_ind in range(2) :
                inds = self.FileProcessor.get_scan_IF_inds(scan_ind, IF_ind)
                IFs = self.IFs_all[inds]
                scans = self.scans_all[inds]
                # Verify we got all of them.
                self.assertEqual(sp.size(inds), npol*ncal*ntimes_scan)
                # Verify they are all unique.
                self.assertEqual(len(sp.unique(inds)), npol*ncal*ntimes_scan)
                # Check that they are all right.
                wrong_scan = sp.where(sp.not_equal(scans, scan_set[scan_ind]))
                wrong_IF = sp.where(sp.not_equal(IFs, IF_set[IF_ind]))
                self.assertEqual(len(wrong_scan[0]), 0)
                self.assertEqual(len(wrong_IF[0]), 0)

    def test_reforms_records(self) :
        """Test reshaping of indicies to time x pol x cal."""
        
        # Get the inds of a scan and IF and use them to get some data.
        inds = self.FileProcessor.get_scan_IF_inds(1, 1)
        LST = sp.array(self.FileProcessor.fitsdata.field('LST')[inds])
        pol = sp.array(self.FileProcessor.fitsdata.field('CRVAL4')[inds])
        cal = sp.array(self.FileProcessor.fitsdata.field('CAL')[inds])
        # Test that the indicies have the proper shape
        shape_expected = (ntimes_scan, npol, ncal)
        self.assertEqual(shape_expected, sp.shape(inds))
        # Make sure that LST is constant of indicies 1,2.  Etc. for pol, cal.
        aLST = sp.unique(LST[0,:,:])
        self.assertEqual(len(aLST), 1)
        apol = sp.unique(pol[:,0,:])
        self.assertEqual(len(apol), 1)
        acal = sp.unique(cal[:,:,0])
        self.assertEqual(len(acal), 1)

    def test_checks_data_order(self) :
        """Puts pols out of order and check if exception is raised."""

        # Mess up the cals in one of the scans, IFs
        inds = self.FileProcessor.get_scan_IF_inds(1, 1)
        self.FileProcessor.fitsdata.field('CAL')[inds[1,1,1]] = 'T';
        self.FileProcessor.fitsdata.field('CAL')[inds[1,1,0]] = 'T';
        # See if an error is raised when we try to re-get the inds.
        self.assertRaises(ce.DataError, self.FileProcessor.get_scan_IF_inds,
                          1, 1)
        # Mess up the pols in another of the scans, IFs
        inds = self.FileProcessor.get_scan_IF_inds(0, 0)
        self.FileProcessor.fitsdata.field('CRVAL4')[inds[1,1,1]] = '-8';
        self.FileProcessor.fitsdata.field('CRVAL4')[inds[1,2,1]] = '-8';
        # See if an error is raised when we try to re-get the inds.
        self.assertRaises(ce.DataError, self.FileProcessor.get_scan_IF_inds,
                          0, 0)
        # Mess up time ordering in yet another scan, IF.
        inds = self.FileProcessor.get_scan_IF_inds(1, 0)
        self.FileProcessor.fitsdata.field('LST')[inds[4,:,:]] = '100';
        self.FileProcessor.fitsdata.field('LST')[inds[6,:,:]] = '100';
        # See if an error is raised when we try to re-get the inds.
        self.assertRaises(ce.DataError, self.FileProcessor.get_scan_IF_inds,
                          1, 0)


                        
    def tearDown(self) :
        del self.FileProcessor








if __name__ == '__main__' :
    unittest.main()
